---
title: 'Practical 2: Foundations (Part 1)'
subtitle: "Getting to grips with the 'Basics'"
format:
  html: default
  ipynb: default
filters:
  - qna
  - quarto
---

This week is focussed on ensuring that you're able to access the teaching materials and to run Jupyter notebooks locally, as well as describing a dataset in Python.

## Learning Outcomes

- You have familiarised yourself with how to access the lecture notes and Python notebook of this module.
- You have familiarised yourself with running the Python notebooks locally.
- You have familiarised yourself with describing a dataset in Python.

# Starting the Practical

The process for every week will be the same: download the notebook to your `QM` folder, switch over to `JupyterLab` (which will be running in Podman/Docker) and get to work. If you want to save the completed notebook to your Github repo, you can `add`, `commit`, and `push` the notebook in Git after you download it. When you're done for the day, save your changes to the file (This is very important!), then `add`, `commit`, and `push` your work to save the completed notebook. 

::: {.callout-info}

### 

Suggestions for a Better Learning Experience
- **Set your operating system and software language to English**  
  This will make it easier to follow tutorials, search for solutions online, and understand error messages.

- **Save all files to a cloud storage service**  
  Use platforms like Google Drive, OneDrive (2TB OneDrive space from UCL), Dropbox, or Git to ensure your work is backed up and can be restored easily when the laptop gets stolen or broken.

:::

## Set up the tools

Please follow [the Setup page of CASA0013](https://jreades.github.io/fsds/setup/) to install and configure the computing platform, and [this page](https://jreades.github.io/fsds/sessions/week1.html) to get started on using the container & JupyterLab.

## Download the Notebook

So for this week, visit the [Week 1 of QM page](https://huanfachen.github.io/QM/sessions/week1.html#practical), you'll see that there is a 'preview' link and a a 'download' link. If you click the `preview` link you will be taken to the GitHub page for the notebook where it has been 'rendered' as a web page, which is not editable. 
To make the notebook useable on *your* computer, you need to `download` the IPYNB file.

So now:

1. Click on the `Download` link.
2. The file should download automatically, but *if* you see a page of raw code, select `File` then `Save Page As...`.
3. Make sure you know where to find the file (e.g. Downloads or Desktop). 
4. Move the file to your Git repository folder (e.g. `~/Documents/CASA/QM/`)
5. Check to see if your browser has added `.txt` to the file name:
   - If no, then you can move to adding the file.
   - If yes, then you can either fix the name in the Finder/Windows Explore, or you can do this in the Terminal using `mv <name_of_practical>.ipynb.txt <name_of_practical>.ipynb` (you can even do this in JupyterLab's terminal if it's already running).

## Running notebooks on JupyterLab

I am assuming that most of you are already running JupyterLab via Podman using the command.

If you are a bit confused with *container*, *JupyterLab*, *terminal*, or *Git*, please feel free to ask any questions.

## Starting the Practical Notebook

*Now* from _within Jupyter Lab_ you should start the Practical 2 notebook:

1. Starting from the `work` folder, navigate to your repo folder where you saved this notebook (`Practical-02-Foundations_1.ipynb`).
2. Double-click the notebook file and the notebook should appear on the right-hand side. If all you see is reams of plain text then there is probably still a `.txt` extension on your notebook file that hasn't been removed.

Now you can run code directly in your browser, so let's try it!

# Python Variables

::: {.callout-note}
### Connections

 This is a short recap of materials covered in this week's video on [Python: the Basics]({{< var module.web >}}/sessions/week2.html#lectures) as well as Code Camp's [The Basics]({{< var module.camp >}}/lessons/The_Basics.html)

:::

## Variable Names

::: {.callout-note}
### Look closer!

 Pay attention to the *colour* of the code, while it might be subtle (a single character in a different colour), it is giving you clues as to where problems might be found because it means the Python 'interpreter' is reading what you wrote differently from how you *probably* meant it...

:::
    
_Some_ of the lines of code below are valid Python, but others _may_ have a problem that will cause Python to generate an error. Each error can be fixed by changing _one_ character. See if you can work out which ones you need to fix **before running the code**:

::: {.qna}

#### Question

```python
Pi = 3.14159      # Valid Python
pi = 3.14159      # ??
3pi = 3.14159*3   # ??
pi_2 = 3.14159**2 # ??
pi^2 = 3.14159**2 # ??
my radius = 5     # ??
My_Radius = 5     # ??
class = 5         # ??
```

#### Answer

```{python}
Pi = 3.14159      # Valid Python
pi = 3.14159      # Valid Python
pi3 = 3.14159*3   # Invalid, variable starts with a number
pi_2 = 3.14159**2 # Valid Python
pi2 = 3.14159**2  # Invalid, 'hat' character in variable name
my_radius = 5     # Invalid, space in variable name
My_Radius = 5     # Valid Python
mclass = 5        # Invalid, reserved word
```

:::

## Variable Types

Using only the values for `x`, `y`, and `z`, what operations allow you to print the following?

```bash
6
22
22
125
0.4
```

::: {.qna}

#### Question

```python
x = '2'
y = 2
z = 3

print( ?? ) # 6
print( ?? ) # 22
print( ?? ) # 22 (but a different way!)
print( ?? ) # 125
print( ?? ) # 0.4
```

#### Answer

```{python}
x = '2'
y = 2
z = 3

print(y * z)
print(x * y)
print(x + x)
print((y+z)**z)
print(y/(y+z))
```

:::

## Assignment

**Before running the code**, work out what the values of `x`, `y` and `z` will be after every line of code in the block has been executed.

::: {.qna}

#### Question

```python
x = 12
y = 10

z = x + y # ??
x = x + y # ??
y = z + y # ??

print(x)
print(y)
print(z)
```

#### Answer

```{python}
x = 12
y = 10

z = x + y
x = x + y
y = z + y

print(x)
print(y)
print(z)
```

:::

Once you have worked out what you think `x`, `y` and `z` are, run the code to check your answers!

Make sure you understand the results you find. **Ask someone if you need help to understand.**

## Operators & Precedence

**Before running the code**, work out what the values of `x`, `y` and `z` will be after every line of code in the block has been executed. Feel free to use a calculator.

::: {.callout-tip}

 This question is about what operations (i.e. multiplication, division, powers, etc.) are done *first* based on the type of operation and the presence of parentheses... it's the same as it would be for a maths problem!
 
:::

::: {.qna}

#### Question

By adding parentheses adjust the equations below to output the following:

```bash
2.5
2.25
2.5
```

```python
print(1 + 2 * 3 / 4)
print(1 + 2 * 3 / 4)
print(1 + 2 * 3 / 4)
```

#### Answer

```{python}
print(1 + (2 * 3) / 4)
print((1 + 2) * (3 / 4))
print(1 + 2 * (3 / 4))
```

:::

Once you have calculated what you think `x`, `y` and `z` are, run the code to check.

## Test Your Operator Knowledge

Now let's look at some of the stranger operators. Many of these can be very useful in more complex code but can seem a little pointless now.

**Work out what operator should replace the `?`** in each of the lines of code below to produce the output I've shown in the comments. I've mixed in ones you have seen above with ones that we've not seen before.

::: {.qna}

#### Question

```python
x = 10
y = 3

print( x ?? y ) # 1
print( x ?? y ) # 13
print( x ?? y ) # False
print( x ?? y ) # 1000
print( x ?? y ) # 7
print( x ?? y ) # 3
```

#### Answer

```{python}
x = 10
y = 3

print( x % y ) # 1
print( x + y ) # 13
print( x == y ) # False
print( x ** y ) # 1000
print( x - y ) # 7
print( x // y ) # 3
```

:::

## Applying What We've Learned

Now we are going to take what we've learned and apply it in a more 'abstract' way: how do we translate some well-known mathematical formulae _into code_? In particular, I'm interested in the formula for the volume of a sphere (and this gives me a chance to show that Notebooks can show formulae as well!):

$$
V = \frac{4}{3}\pi r^{3}
$$

### Calculate the Volume of a Sphere

So, given a sphere with a **diameter** of 12cm, calculate its volume:

::: {.callout-tip}

I would strongly advise you to Google: `python constant pi` and look for code that will save you having to write down the value of $\pi$.

:::

::: {.qna}

#### Question

```python
from math import ??
v = ??
print(f"{v:0.3f} cm3")
```

#### Answer

```{python}
from math import pi
v = (4/3) * pi * (12/2)**3
print(f"{v:0.3f}")
```

:::

I get an answer of `{python} f"{v:0.3f}"`cm$^3$.

### Calculate the Radius of a Sphere

Now, given a sphere of volume 14,137cm$^3$ calculate its radius as a **whole number**. The formula for this can be worked out as:

\begin{align*}
\frac{3}{4}V &= \pi r^{3} \\
\frac{3}{4}\frac{V}{\pi} &= r^{3} \\
(\frac{3}{4}\frac{V}{\pi})^{1/3} &= r
\end{align*}

If you can't remember how to rearrange formulae this would be a good skill to refresh! 

::: {.callout-tip}

There are three ways to get a "whole number" from a float:

1. When you're starting out, the easiest is to change the variable's `type`
2. The next step up is to make use of Google to find out if there are ways of *rounding* to the nearest integer
3. The third step is to change what's visible to the user without altering the actual number

:::

I get an answer of either 14 or 15... can you work out why?

::: {.qna}

#### Question

```python
from math import pi
v = 14137
r = ??
print(??)
```

#### Answer

```{python}
from math import pi
v = 14137
r = ((3 * v) / (4 * pi))**(1/3)
print("1. " + str(int(r)) + " cm")
print("2. " + str(round(r)) + " cm")
print("3. " + f"{r:0.0f} cm")
```

:::

# Python Conditions

::: {.callout-note}
### Connections

This is a short recap of material covered in Code Camp's [Truth & Conditions]({{< var module.camp >}}lessons/Boolean_Logic.html) and, to some extent, the [Iteration]({{< var module.web >}}sessions/week2.html#pre-recorded-lectures) lecture.

:::

## Working with Conditions

Use `if`, `elif`, and `else` so that you get the following output:

1. When `hours` is 10 or more, then the code prints `At least 10 hours worked!`
2. When `hours` is exactly 2, then the code prints `Exactly 2 hours worked.`  
3. When `hours` is 9 or less *but not 2*, then the code prints `Less than 10 hours worked!`

::: {.callout-tip}

### Hint

 You will *also* need to think about the order in which these conditions are tested.
 
:::

::: {.qna}

#### Question

```python
hours = 2

if hours ??:
    print(" ")
elif hours ??:
    print(" ")
else:
    print(" ")
```

#### Answer

```{python}
hours=2

if hours == 2:
    print("Exactly 2 hours worked")
elif hours < 10:
    print("Less than 10 hours worked!")
else:
    print("At least 10 hours worked!")
```

:::

## Flow Control

Using the flow chart shown in the image below as a model, write the code to make this condition work. You will need to complete the code such that it produces the following:
1. When `a = 2` and `b = 2` four lines of output will be written
2. When `a = 1` and `b = 2` one line of output will be written

![]({{< var module.web >}}/practicals/img/geocompweek2_task3_3.jpg){width=600}

::: {.qna}

#### Question

```python
a = 1
b = 1

# <your code here>
??
```

#### Answer

```{python}
a = 1
b = 1

x = a

if x == b:
    print("inside 1")
    print("inside 2")
    print("inside")

print("after condition")
```

:::

# Python Logic

::: {.callout-note}

### Connections

 This is a short recap of Code Camp's [Boolean Logic]({{< var module.camp >}}lessons/Boolean_Logic.html) session and the [Pthon: the Basics]({{< var module.web >}}/sessions/week2.html#lectures) lecture.
 
:::

## It's All Quite Logical...

Before adding a value for `x` and running the code below, try to answer the following questions:

::: {.qna}

#### Question

1. What names are name(s) are printed when `x = 5`? 
2. What value(s) can `x` be when the names `Joe` and `Aled` are printed? 
3. What name(s) are printed when `x = -1`?  
4. Is there any value for which all three names will be printed? 

```python
x = ??

if x > 0 and x < 5:
    print("Joe")

if x > 0 or x < 5:
    print("Aled")

if not(x > 0):
    print("Sarah")
```

#### Answer

1. What names are name(s) are printed when `x = 5`? **Answer**: `Aled`
2. What value(s) can `x` be when the names `Joe` and `Aled` are printed? **Answer**: $x \in [1,4]$
3. What name(s) are printed when `x = -1`?  **Answer**: `Aled` and `Sarah`
4. Is there any value for which all three names will be printed? `No`

```{python}
x = 0

if x > 0 and x < 5:
    print("Joe")

if x > 0 or x < 5:
    print("Aled")

if not(x > 0):
    print("Sarah")
```

:::

## Logic (Cont'd)

Study the flow chart below.

![]({{< var module.web >}}practicals/img/geocompweek2_task3_5.jpg){width=600}

::: {.callout-tip}

This will require you to combine logic with one of the operators that we saw earlier. Also note the *new* iterator that we've got here: `range(<start>, <stop>)` to create a `range` of numbers between two other numbers.
 
:::

In the cell below, use the for loop _already set up_ to as a starting point for implementing the flow chart shown above for values of `x` between 0 and 9.

::: {.qna}

#### Question

```python
for x in range(0,9):
    #... do something...
    ??
```

#### Answer

```{python}
for x in range(0,9):
    #... do something...
    print(x, end=": ")
    if x%2==0:
        print("x is even.")
    else:
        print("x is odd")
```

:::

## 'Nested' Conditionals

Conditional statements can be nested within one another. That is, Python evaluates the first, or 'outer', condition and can then evaluate secondary, or 'inner', conditions. The code below shows an example of this. 

::: {.qna}

#### Question

```python
x = 5
y = 4

if x != y:                                 #line 1
    print("x is not equal to y")
    
    if(x > y):                             #line 4
        print("x is greater than y")
    
    else:                                  #line 7
        print("x is less than y")

else:
    print("<insert conclusion here>")
```

#### Answer

```{python}
x = 2
y = 3

if x != y:                                 #line 1
    print("x is not equal to y")

    if(x > y):                             #line 4
        print("x is greater than y")

    else:                                  #line 7
        print("x is less than y")

else:
    print("x is equal to y")
```

:::

Note how the indentation makes it easier to work out which ‘level’ (outer or inner condition) the code is operating on. In the code above, lines 4 and 7 are at the same indentation meaning that _both will be skipped_ if the initial condition (on line 1) is `False`. 

To check you understand how the code above works:

1. Change `<insert conclusion here>` to a string that explains the condition of `x` and `y`
2. For `x = 2` and `y = 3`, type what line(s) will be output here: ...

Great! You should now have a pretty good understanding of how conditional and logical operators work. This understanding will be handy in future as we work through other computational concepts.

# Python Lists

::: {.callout-note}

### Connections

 This is a short recap of material covered in the [Lists]({{< var module.web >}}sessions/week2.html#lectures) lecture and Code Camp's [Lists]({{< var module.camp >}}lessons/Lists.html) session.
 
:::

## Who's in the List?

Here we are looking to interact with lists in a straightforward way that will help you to understand accessing them using indexes and slices, and searching.

::: {.qna}

#### Question

```python
cities = ['New York', 'London', 'Beijing', 'Tokyo', 'Delhi']

# Print out London from cities:
print( ?? )

# Print out Tokyo using *negative* indexing:
print( ?? )

# Print out Beijing *and* Tokyo using a list slice
print( ?? )

# Print out London to Delhi using a slice
print( ?? ) # You could also do cities[1:5] but this way is neater

# Combine positive and negative indexing to print out London, Beijing and Tokyo using a list slice
print( ?? )

# Print out the index for New York by searching for it (i.e. you can't just type 0)
print( ?? )
```

#### Answer

```{python}
cities = ['New York', 'London', 'Beijing', 'Tokyo', 'Delhi']

# Print out London from cities:
print( cities[1] )

# Print out Tokyo using *negative* indexing:
print( cities[-2] )

# Print out Beijing and Tokyo using a list slice
print( cities[2:4] )

# Print out London to Delhi using a slice
print( cities[1:] ) # You could also do cities[1:5] but this way is neater

# Combine positive and negative indexing to print out London, Beijing and Tokyo using a list slice
print( cities[1:-1] )

# Print out the position of New York in the list by searching for it (i.e. you can't just type 0)
print( cities.index('New York') )
```

:::

## Manipulating Lists

Let's break a few things...

### Create an IndexError

::: {.qna}

#### Question

```python
# Cause an 'IndexError: list index out of range' errr
??
```

#### Answer

```{{python}}
cities[7]
```

:::

### Create a ValueError

::: {.qna}

#### Question

```python
# Cause a ValueError using the city of Toronto
??
```

#### Answer

```{{python}}
cities.index('Toronto')
```

:::

### Sort the List

Sort the list *in place* in reverse alphabetical order (i.e. z...a) and then print the sorted list

::: {.qna}

#### Question

```python
??
print(cities)
```

The output from this should be: <code>`{python} sorted(cities, reverse=True)`</code>

#### Answer

```{python}
# The approach does _not_ sort the original list,
# it returns a copy of the list that is sorted:
print(sorted(cities, reverse=True)) # <- what is printed is sorted
print(cities)                       # <- but the list is not

# This is the 'in place' option
cities.sort(reverse=True)           # <- list is now sorted
print(cities)
```

:::

## Adding/Removing Values

### Inserting into a List

Add the city of Toronto to the list _after_ New York in the *sorted* list.

::: {.qna}

#### Question

```python
# Just in case you make a mistake...
cities = ['Tokyo', 'New York', 'London', 'Delhi', 'Beijing']

??
print(cities)
```

#### Answer

```{python}
# Just in case you make a mistake...
cities = ['Tokyo', 'New York', 'London', 'Delhi', 'Beijing']

cities.insert(2,'Toronto')
print(cities)
```

:::

The output should be: <code>`{python} cities`</code>

### Removing from a List

Now *pop* New York from the list *without* specifying its index (i.e. the number `1` should *not* appear in your code). Print out the value that you popped and the print out the cities list to check you've done the right thing...

::: {.qna}

#### Question

```python
??
print(p)
print(cities)
```

#### Answer

```{python}
p = cities.pop( cities.index('New York') )
print(p)
print(cities)
```

:::

The output should be: 

- <code>`{python} p`</code>
- <code>`{python} cities`</code>

### Checking Lists

Finally, how can you check if the city of Moscow is in the list and let the user know if it is or is not?

::: {.qna}

#### Question

```python
if ??
    ??
else:
    ??
```

#### Answer

```{python}
if 'Moscow' in cities:
    print("Moscow is in the cities list.")
else:
    print("Moscow is not in the cities list.")
```

:::

## You're Done!

This is quite a lot to get through. If you've managed it in under 2 hours then *congratulations*! Either you must have paid a lot of attention when doing Code Camp, or you might want to check in with us as to whether you should really be doing this module...

### No Wait, One More Thing...

You now want to add/commit/push your completed notebook to your GitHub reposistory. Using the Terminal you need to:

1. Navigate to your repository (e.g.`$HOME/Documents/CASA/<your repository>`).
2. Check the status of your notebooks using `git status` (you should see that `Practical-02-Foundations_1.ipynb has been modified`).
3. Add the *changes* to Git using `git add  Practical-02-Foundations_1.ipynb`
4. Commit this changed notebook with a message using `git commit -m "<your message here...>"`
5. Push this change to GitHub using: `git push`

You should now be able to visit your repository on [GitHub](https://github.com/) and see that your changes are now stored there as well!